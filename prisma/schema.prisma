datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Course {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)

  categoryId String?

  attachments Attachment[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Category  Category? @relation(fields: [categoryId], references: [id])
  Chapter   Chapter[]

  @@index([categoryId])
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String   @db.Text
  Course    Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)
  courseId    String
  Course      Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]
  muxData      MuxData?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MuxData {
  id         String   @id @default(uuid())
  chapter    Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId  String?
  assetId    String?
  playbackId String?
}
